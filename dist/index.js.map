{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAC7B,6BAA+B;AAC/B,oCAAqC;AAErC,6BAAwB;AAExB,KAAK,CAAC,mBAAmB,CAAC,CAAC;AAE3B,IAAM,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AACrD,aAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAEtB,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,aAAG,CAAC,CAAC;AAEtC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5B,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACpC,IAAI,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1B,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,MAAM;IACvB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AACH,uBAAuB,GAAkB;IACrC,IAAI,IAAI,GAAW,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;IACvE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,GAAG,CAAC;IAC5B,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,IAAI,CAAC;IAChC,IAAI;QAAC,MAAM,CAAC,KAAK,CAAC;AACtB,CAAC;AAED,iBAAiB,KAA4B;IACzC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,CAAC;QAAC,MAAM,KAAK,CAAC;IAC5C,IAAI,IAAI,GAAG,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,GAAG,OAAO,GAAG,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;IACxE,MAAM,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAChB,KAAK,QAAQ;YACT,OAAO,CAAC,KAAK,CAAI,IAAI,kCAA+B,CAAC,CAAC;YACtD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,KAAK,CAAC;QACV,KAAK,YAAY;YACb,OAAO,CAAC,KAAK,CAAI,IAAI,uBAAoB,CAAC,CAAC;YAC3C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,KAAK,CAAC;QACV;YACI,MAAM,KAAK,CAAC;IACpB,CAAC;AACL,CAAC;AAED;IACI,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAC5B,IAAI,IAAI,GAAG,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,GAAG,UAAQ,IAAM,GAAG,UAAQ,IAAI,CAAC,IAAM,CAAC;IAC7E,KAAK,CAAC,kBAAgB,IAAM,CAAC,CAAC;AAClC,CAAC","file":"index.js","sourcesContent":["import * as http from 'http';\r\nimport * as debug from 'debug';\r\nimport * as socketio from 'socket.io'\r\n\r\nimport App from './app';\r\n\r\ndebug('ts-express:server');\r\n\r\nconst port = normalizePort(process.env.PORT || 3000);\r\nApp.set('port', port);\r\n\r\nconst server = http.createServer(App);\r\n\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\nlet io = socketio(server);\r\nio.on('connection', (socket)=>{\r\n    console.log('User connected');\r\n});\r\nfunction normalizePort(val: number|string): number|string|boolean {\r\n    let port: number = (typeof val === 'string') ? parseInt(val, 10) : val;\r\n    if (isNaN(port)) return val;\r\n    else if (port >= 0) return port;\r\n    else return false;\r\n}\r\n\r\nfunction onError(error: NodeJS.ErrnoException): void {\r\n    if (error.syscall !== 'listen') throw error;\r\n    let bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;\r\n    switch(error.code) {\r\n        case 'EACCES':\r\n            console.error(`${bind} requires elevated privileges`);\r\n            process.exit(1);\r\n            break;\r\n        case 'EADDRINUSE':\r\n            console.error(`${bind} is already in use`);\r\n            process.exit(1);\r\n            break;\r\n        default:\r\n            throw error;\r\n    }\r\n}\r\n\r\nfunction onListening(): void {\r\n    let addr = server.address();\r\n    let bind = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr.port}`;\r\n    debug(`Listening on ${bind}`);\r\n}"],"sourceRoot":"."}